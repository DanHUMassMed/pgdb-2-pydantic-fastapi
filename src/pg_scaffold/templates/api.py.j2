from typing import List

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session

from app.crud import {{ file_name }} as crud
from app.schemas import {{ file_name }} as {{ file_name }}_schema
from app.core.db import SessionLocal

router = APIRouter()

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



@router.post("/{{ table_name }}/", response_model={{ file_name }}_schema.{{ class_name }}Create)
def create_{{ table_name }}({{ file_name }}: {{ file_name }}_schema.{{ class_name }}Create, db: Session = Depends(get_db)):
    db_obj = crud.{{ file_name }}.create(db=db, obj_in={{ file_name }})
    return db_obj


@router.get("/{{ table_name }}/", response_model=List[{{ file_name }}_schema.{{ class_name }}Read])
def read_{{ table_name }}(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    db_obj = crud.{{ file_name }}.get_multi(db, skip=skip, limit=limit)
    return db_obj


@router.get("/{{ table_name }}/{{'{'}}{{ file_name }}_id{{'}'}}", response_model={{ file_name }}_schema.{{ class_name }}Read)
def read_one_{{ table_name }}({{ file_name }}_id: int, db: Session = Depends(get_db)):
    db_obj = crud.{{ file_name }}.get(db, id={{ file_name }}_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="{{ class_name }} not found")
    return db_obj


@router.put("/{{ table_name }}/{{'{'}}{{ file_name }}_id{{'}'}}", response_model={{ file_name }}_schema.{{ class_name }}Read)
def update_{{ table_name }}({{ file_name }}_id: int, {{ file_name }}_update: {{ file_name }}_schema.{{ class_name }}Update, db: Session = Depends(get_db)):
    db_obj = crud.{{ file_name }}.get(db, id={{ file_name }}_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="{{ class_name }} not found")
    return crud.{{ file_name }}.update(db=db, db_obj=db_obj, obj_in={{ file_name }}_update)


@router.delete("/{{ table_name }}/{{'{'}}{{ file_name }}_id{{'}'}}", response_model={{ file_name }}_schema.{{ class_name }}Read)
def delete_{{ table_name }}({{ file_name }}_id: int, db: Session = Depends(get_db)):
    db_obj = crud.{{ file_name }}.get(db, id={{ file_name }}_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="{{ class_name }} not found")
    return crud.{{ file_name }}.remove(db=db, id={{ file_name }}_id)



