from sqlalchemy.orm import Query, joinedload
from app.crud.base import CRUDBase
from sqlalchemy.orm import Session
from app.models.{{ file_name }} import {{ class_name }}Model
from app.schemas.{{ file_name }} import {{ class_name }}Create, {{ class_name }}Read, {{ class_name }}Update, {{ class_name }}WithRelations
#-- Preserve Custom code START: imports --#
#-- Preserve Custom code END: imports --#

class CRUD{{ class_name }}(CRUDBase[{{ class_name }}Model, {{ class_name }}Create, {{ class_name }}Read, {{ class_name }}Update]):
    """Support simple Create Read Update and Delete (CRUD)"""


    def __init__(self, db: Session, with_relationships: bool = False):
        super().__init__({{ class_name }}Model, {{ class_name }}Create, {{ class_name }}WithRelations if with_relationships else {{ class_name }}Read, {{ class_name }}Update, db)

{% if relationships %}
    def _get_first_hook(self, query: Query) -> Query:
        return query.options(
            {% for relationship in relationships %}
            {% if relationship.relation_type =="foreign_key" %}
            joinedload({{ class_name }}Model.{{ relationship.variable_name }}),
            {% endif -%}
            {% endfor %}
        )

    def _get_many_hook(self, query: Query) -> Query:
        return query.options(
            {% for relationship in relationships %}
            joinedload({{ class_name }}Model.{{ relationship.variable_name }}),
            {% endfor %}
        )

    def _get_many_like_hook(self, query: Query) -> Query:
        return query.options(
            {% for relationship in relationships %}
            joinedload({{ class_name }}Model.{{ relationship.variable_name }}),
            {% endfor %}
        )

{% else %}
    # No relationships to handle

{% endif -%} 
#-- Preserve Custom code START: methods --#
#-- Preserve Custom code END: methods --#



