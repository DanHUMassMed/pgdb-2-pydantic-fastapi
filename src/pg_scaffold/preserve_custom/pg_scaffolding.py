import re
from typing import Optional
from pg_scaffold.preserve_custom.base import CodeExtractor, PreservedCode



class PgScaffoldingExtractor(CodeExtractor):
    """Extractor for pg-scaffolding generated files."""
   
    GENERATED_MARKER = r'^\s*#\s*Generated by pg-scaffolding'
    PRESERVE_START = r'^\s*#--\s*Preserve Custom code START\s*--#\s*$'
    PRESERVE_END = r'^\s*#--\s*Preserve Custom code END\s*--#\s*$'
    
    def __init__(self):
        self.generated_pattern = re.compile(self.GENERATED_MARKER, re.MULTILINE | re.IGNORECASE)
        self.start_pattern = re.compile(self.PRESERVE_START, re.MULTILINE | re.IGNORECASE)
        self.end_pattern = re.compile(self.PRESERVE_END, re.MULTILINE | re.IGNORECASE)
    
    def is_generated_file(self, content: str, file_path: str) -> bool:
        """Check if file contains pg-scaffolding generation marker."""
        return bool(self.generated_pattern.search(content))
    
    def extract_custom_code(self, content: str, file_path: str) -> Optional[PreservedCode]:
        """Extract code between preservation markers."""
        if not self.is_generated_file(content, file_path):
            return None
        
        lines = content.split('\n')
        start_idx = None
        end_idx = None
        
        # Find preservation block boundaries
        for i, line in enumerate(lines):
            if self.start_pattern.match(line):
                start_idx = i + 1
            elif self.end_pattern.match(line) and start_idx is not None:
                end_idx = i
                break
        
        if start_idx is not None and end_idx is not None:
            custom_code_lines = lines[start_idx:end_idx]
            custom_code = '\n'.join(custom_code_lines)
            
            # Only return if there's actual content (not just whitespace)
            if custom_code.strip():
                return PreservedCode(
                    file_path=file_path,
                    custom_code=custom_code,
                    line_number=start_idx
                )
        
        return None

