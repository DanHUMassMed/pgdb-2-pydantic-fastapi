import re
from typing import Optional, List
from pg_scaffold.preserve_custom.base import CodeExtractor, PreservedCode, PreservedBlock


class PgScaffoldingExtractor(CodeExtractor):
    """Extractor for pg-scaffolding generated files supporting multiple preserved blocks."""

    GENERATED_MARKER = r'^\s*(#|//)\s*#?\s*Generated by pg-scaffolding'
    PRESERVE_START = r'^\s*(#|//)\s*#?-{2}\s*Preserve Custom code START(?:\s*:\s*([A-Za-z0-9_\-]+))?\s*-{2}#?\s*$'
    PRESERVE_END = r'^\s*(#|//)\s*#?-{2}\s*Preserve Custom code END(?:\s*:\s*([A-Za-z0-9_\-]+))?\s*-{2}#?\s*$'

    def __init__(self):
        self.generated_pattern = re.compile(self.GENERATED_MARKER, re.MULTILINE | re.IGNORECASE)
        self.start_pattern = re.compile(self.PRESERVE_START, re.MULTILINE)
        self.end_pattern = re.compile(self.PRESERVE_END, re.MULTILINE)

    def is_generated_file(self, content: str, file_path: str) -> bool:
        """Check if file contains pg-scaffolding generation marker."""
        return bool(self.generated_pattern.search(content))

    def extract_custom_code(self, content: str, file_path: str) -> Optional[PreservedCode]:
        """Extract all preserved custom code blocks from the file."""
        if not self.is_generated_file(content, file_path):
            return None

        lines = content.split('\n')
        blocks: List[PreservedBlock] = []
        start_stack = []

        for i, line in enumerate(lines):
            start_match = self.start_pattern.match(line)
            end_match = self.end_pattern.match(line)

            if start_match:
                name = start_match.group(2) or f"block_{len(blocks) + 1}"
                start_stack.append((name, i + 1))

            elif end_match and start_stack:
                name, start_idx = start_stack.pop()
                custom_code_lines = lines[start_idx:i]
                custom_code = '\n'.join(custom_code_lines)
                blocks.append(PreservedBlock(name, custom_code, start_idx, i))

        return PreservedCode(file_path=file_path, blocks=blocks) if blocks else None