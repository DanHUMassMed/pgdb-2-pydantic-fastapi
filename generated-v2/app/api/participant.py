# Generated by pg-scaffolding 2025-09-29 09:30:47
from typing import List

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session

from app.crud import participant
from app.schemas import participant as participant_schema
from app.core.db import SessionLocal

router = APIRouter()

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



@router.post("/participant/", response_model=participant_schema.ParticipantCreate)
def create_participant(participant_in: participant_schema.ParticipantCreate, db: Session = Depends(get_db)):
    db_obj = participant.crud.create(db=db, obj_in=participant_in)
    return db_obj


@router.get("/participant/", response_model=List[participant_schema.ParticipantRead])
def read_participant(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    db_obj = participant.crud.get_multi(db, skip=skip, limit=limit)
    return db_obj


@router.get("/participant/{participant_id}", response_model=participant_schema.ParticipantRead)
def read_one_participant(participant_id: int, db: Session = Depends(get_db)):
    db_obj = participant.crud.get(db, id=participant_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Participant not found")
    return db_obj


@router.put("/participant/{participant_id}", response_model=participant_schema.ParticipantRead)
def update_participant(participant_id: int, participant_update: participant_schema.ParticipantUpdate, db: Session = Depends(get_db)):
    db_obj = participant.crud.get(db, id=participant_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Participant not found")
    return participant.crud.update(db=db, db_obj=db_obj, obj_in=participant_update)


@router.delete("/participant/{participant_id}", response_model=participant_schema.ParticipantRead)
def delete_participant(participant_id: int, db: Session = Depends(get_db)):
    db_obj = participant.crud.get(db, id=participant_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Participant not found")
    return participant.crud.remove(db=db, id=participant_id)



#-- Preserve Custom code START --#
#-- Preserve Custom code END   --#
