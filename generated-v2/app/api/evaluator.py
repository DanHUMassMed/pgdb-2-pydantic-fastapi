# Generated by pg-scaffolding 2025-09-29 09:30:47
from typing import List

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session

from app.crud import evaluator
from app.schemas import evaluator as evaluator_schema
from app.core.db import SessionLocal

router = APIRouter()

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



@router.post("/evaluators/", response_model=evaluator_schema.EvaluatorCreate)
def create_evaluators(evaluator_in: evaluator_schema.EvaluatorCreate, db: Session = Depends(get_db)):
    db_obj = evaluator.crud.create(db=db, obj_in=evaluator_in)
    return db_obj


@router.get("/evaluators/", response_model=List[evaluator_schema.EvaluatorRead])
def read_evaluators(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    db_obj = evaluator.crud.get_multi(db, skip=skip, limit=limit)
    return db_obj


@router.get("/evaluators/{evaluator_id}", response_model=evaluator_schema.EvaluatorRead)
def read_one_evaluators(evaluator_id: int, db: Session = Depends(get_db)):
    db_obj = evaluator.crud.get(db, id=evaluator_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Evaluator not found")
    return db_obj


@router.put("/evaluators/{evaluator_id}", response_model=evaluator_schema.EvaluatorRead)
def update_evaluators(evaluator_id: int, evaluator_update: evaluator_schema.EvaluatorUpdate, db: Session = Depends(get_db)):
    db_obj = evaluator.crud.get(db, id=evaluator_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Evaluator not found")
    return evaluator.crud.update(db=db, db_obj=db_obj, obj_in=evaluator_update)


@router.delete("/evaluators/{evaluator_id}", response_model=evaluator_schema.EvaluatorRead)
def delete_evaluators(evaluator_id: int, db: Session = Depends(get_db)):
    db_obj = evaluator.crud.get(db, id=evaluator_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Evaluator not found")
    return evaluator.crud.remove(db=db, id=evaluator_id)



#-- Preserve Custom code START --#
#-- Preserve Custom code END   --#
