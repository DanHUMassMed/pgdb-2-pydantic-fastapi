# Generated by pg-scaffolding 2025-09-29 09:30:47
from typing import List

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session

from app.crud import event
from app.schemas import event as event_schema
from app.core.db import SessionLocal

router = APIRouter()

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



@router.post("/events/", response_model=event_schema.EventCreate)
def create_events(event_in: event_schema.EventCreate, db: Session = Depends(get_db)):
    db_obj = event.crud.create(db=db, obj_in=event_in)
    return db_obj


@router.get("/events/", response_model=List[event_schema.EventRead])
def read_events(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    db_obj = event.crud.get_multi(db, skip=skip, limit=limit)
    return db_obj


@router.get("/events/{event_id}", response_model=event_schema.EventRead)
def read_one_events(event_id: int, db: Session = Depends(get_db)):
    db_obj = event.crud.get(db, id=event_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Event not found")
    return db_obj


@router.put("/events/{event_id}", response_model=event_schema.EventRead)
def update_events(event_id: int, event_update: event_schema.EventUpdate, db: Session = Depends(get_db)):
    db_obj = event.crud.get(db, id=event_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Event not found")
    return event.crud.update(db=db, db_obj=db_obj, obj_in=event_update)


@router.delete("/events/{event_id}", response_model=event_schema.EventRead)
def delete_events(event_id: int, db: Session = Depends(get_db)):
    db_obj = event.crud.get(db, id=event_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Event not found")
    return event.crud.remove(db=db, id=event_id)



#-- Preserve Custom code START --#
#-- Preserve Custom code END   --#
