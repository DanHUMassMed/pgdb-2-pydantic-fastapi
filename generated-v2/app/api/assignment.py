# Generated by pg-scaffolding 2025-09-29 09:30:47
from typing import List

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session

from app.crud import assignment
from app.schemas import assignment as assignment_schema
from app.core.db import SessionLocal

router = APIRouter()

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



@router.post("/assignments/", response_model=assignment_schema.AssignmentCreate)
def create_assignments(assignment_in: assignment_schema.AssignmentCreate, db: Session = Depends(get_db)):
    db_obj = assignment.crud.create(db=db, obj_in=assignment_in)
    return db_obj


@router.get("/assignments/", response_model=List[assignment_schema.AssignmentRead])
def read_assignments(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    db_obj = assignment.crud.get_multi(db, skip=skip, limit=limit)
    return db_obj


@router.get("/assignments/{assignment_id}", response_model=assignment_schema.AssignmentRead)
def read_one_assignments(assignment_id: int, db: Session = Depends(get_db)):
    db_obj = assignment.crud.get(db, id=assignment_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Assignment not found")
    return db_obj


@router.put("/assignments/{assignment_id}", response_model=assignment_schema.AssignmentRead)
def update_assignments(assignment_id: int, assignment_update: assignment_schema.AssignmentUpdate, db: Session = Depends(get_db)):
    db_obj = assignment.crud.get(db, id=assignment_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Assignment not found")
    return assignment.crud.update(db=db, db_obj=db_obj, obj_in=assignment_update)


@router.delete("/assignments/{assignment_id}", response_model=assignment_schema.AssignmentRead)
def delete_assignments(assignment_id: int, db: Session = Depends(get_db)):
    db_obj = assignment.crud.get(db, id=assignment_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Assignment not found")
    return assignment.crud.remove(db=db, id=assignment_id)



#-- Preserve Custom code START --#
#-- Preserve Custom code END   --#
