# Generated by pg-scaffolding 2025-09-29 09:30:47
from typing import List

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session

from app.crud import user
from app.schemas import user as user_schema
from app.core.db import SessionLocal

router = APIRouter()

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



@router.post("/users/", response_model=user_schema.UserCreate)
def create_users(user_in: user_schema.UserCreate, db: Session = Depends(get_db)):
    db_obj = user.crud.create(db=db, obj_in=user_in)
    return db_obj


@router.get("/users/", response_model=List[user_schema.UserRead])
def read_users(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    db_obj = user.crud.get_multi(db, skip=skip, limit=limit)
    return db_obj


@router.get("/users/{user_id}", response_model=user_schema.UserRead)
def read_one_users(user_id: int, db: Session = Depends(get_db)):
    db_obj = user.crud.get(db, id=user_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_obj


@router.put("/users/{user_id}", response_model=user_schema.UserRead)
def update_users(user_id: int, user_update: user_schema.UserUpdate, db: Session = Depends(get_db)):
    db_obj = user.crud.get(db, id=user_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="User not found")
    return user.crud.update(db=db, db_obj=db_obj, obj_in=user_update)


@router.delete("/users/{user_id}", response_model=user_schema.UserRead)
def delete_users(user_id: int, db: Session = Depends(get_db)):
    db_obj = user.crud.get(db, id=user_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="User not found")
    return user.crud.remove(db=db, id=user_id)



#-- Preserve Custom code START --#
#-- Preserve Custom code END   --#
