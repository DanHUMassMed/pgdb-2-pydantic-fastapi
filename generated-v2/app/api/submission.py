# Generated by pg-scaffolding 2025-09-29 09:30:47
from typing import List

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session

from app.crud import submission
from app.schemas import submission as submission_schema
from app.core.db import SessionLocal

router = APIRouter()

# Dependency
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



@router.post("/submission/", response_model=submission_schema.SubmissionCreate)
def create_submission(submission_in: submission_schema.SubmissionCreate, db: Session = Depends(get_db)):
    db_obj = submission.crud.create(db=db, obj_in=submission_in)
    return db_obj


@router.get("/submission/", response_model=List[submission_schema.SubmissionRead])
def read_submission(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):
    db_obj = submission.crud.get_multi(db, skip=skip, limit=limit)
    return db_obj


@router.get("/submission/{submission_id}", response_model=submission_schema.SubmissionRead)
def read_one_submission(submission_id: int, db: Session = Depends(get_db)):
    db_obj = submission.crud.get(db, id=submission_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Submission not found")
    return db_obj


@router.put("/submission/{submission_id}", response_model=submission_schema.SubmissionRead)
def update_submission(submission_id: int, submission_update: submission_schema.SubmissionUpdate, db: Session = Depends(get_db)):
    db_obj = submission.crud.get(db, id=submission_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Submission not found")
    return submission.crud.update(db=db, db_obj=db_obj, obj_in=submission_update)


@router.delete("/submission/{submission_id}", response_model=submission_schema.SubmissionRead)
def delete_submission(submission_id: int, db: Session = Depends(get_db)):
    db_obj = submission.crud.get(db, id=submission_id)
    if db_obj is None:
        raise HTTPException(status_code=404, detail="Submission not found")
    return submission.crud.remove(db=db, id=submission_id)



#-- Preserve Custom code START --#
#-- Preserve Custom code END   --#
